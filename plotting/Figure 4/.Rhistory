guides(fill = guide_colorbar(
title = name,
title.position = "top",
label.position = "top"),
)
}
(fig <- plot_grid(plot_col(prepare_df(covid), "\nCOVID-19") + theme(strip.text = element_blank(), axis.ticks.y = element_line(), axis.text.y = element_text(size=11)) ,
plot_col(prepare_df(coh_rot_algae), "Rotifers-Algae\n(coherent)") + theme(strip.text = element_blank()),
plot_col(prepare_df(incoh_rot_algae), "Rotifers-Algae\n(incoherent)") + theme(strip.text = element_blank()),
plot_col(prepare_df(lynx_hares), "\nLynx and Hares") + theme(strip.text = element_text(size=11)),
nrow=1,
rel_widths = c(1.17, 1, 1, 1.187),
labels = c("Relative\n  MAE", "", "", ""),
label_fontfamily = "serif",
label_fontface = "plain",
label_size = 11,
hjust = 0.52, vjust = 3) +
theme(plot.margin = margin(0,0,3,2))
)
y.grob <- textGrob("IC sampling interval",
gp=gpar(fontsize=15, fontfamily="LM Roman 10"), rot=90, hjust = 0.7, vjust=0.3)
x.grob <- textGrob("KP sampling interval",
gp=gpar(fontsize=15, fontfamily="LM Roman 10"), vjust=0.5)
y2.grob <- textGrob("Dataset size",
gp=gpar(fontsize=15, fontfamily="LM Roman 10"), rot=270, hjust = 0.25)
fig_complete <- grid.arrange(arrangeGrob(fig, left = y.grob, bottom = x.grob, right=y2.grob))
ggsave("multivariate-evaluation_v5_reverse.pdf", fig_complete, width=6.5, height=7, device=cairo_pdf)
install.packages("tidyverse")
install.packages("cowplot")
install.packages("scales")
install.packages("extrafont")
library(tidyverse)
library(ggplot2)
library(cowplot)
library(scales)
library(extrafont)
loadfonts()
theme_set(theme_classic(base_size = 22))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Load results and convert experiments to factor (+ correct naming)
dl_results <- read_csv("mae_dataframe.csv") |>
mutate(
EXP = if_else(EXP == "covid", "COVID-19*",
if_else(EXP == "coh._rotifers_algae", "Rotifers-Algae\n(coherent)",
if_else(EXP == "incoh._rotifers_algae", "Rotifers-Algae\n(incoherent)",
"Lynx and Hares"))),
EXP = factor(EXP, levels=c("COVID-19*", "Rotifers-Algae\n(coherent)", "Rotifers-Algae\n(incoherent)", "Lynx and Hares")),
`Dataset size` = as.factor(TS)
)
# Load ode baseline result and convert experiments to factor (+ correct naming)
ode_baseline <- read_csv("../ode_baseline.csv") |>
pivot_longer(everything(), names_to = "EXP", values_to = "MAE") |>
mutate(
EXP = if_else(EXP == "covid", "COVID-19",
if_else(EXP == "rotifers_algae_coherent", "Rotifers-Algae\n(coherent)",
if_else(EXP == "rotifers_algae_incoherent", "Rotifers-Algae\n(incoherent)",
"Lynx and Hares"))),
EXP = factor(EXP, levels=c("COVID-19", "Rotifers-Algae\n(coherent)", "Rotifers-Algae\n(incoherent)", "Lynx and Hares")),
x = c(0.5, 1.5, 2.5, 3.5),
x_end = c(1.5, 2.5, 3.5, 4.5)
) |>
filter(EXP != "COVID-19")
(fig <- ggplot() +
geom_hline(yintercept = 1, linewidth=1, color='#3E4989') + # This is for the DL baseline - normalized with itself -> 1
geom_boxplot(data=dl_results, aes(x=EXP, y=MAE, fill=`Dataset size`, color=`Dataset size`), alpha=0.5, size=0.75) + # all results
geom_segment(data=ode_baseline, aes(x = x, xend = x_end, y = MAE, yend = MAE), linewidth=1, color='#51A537') + # ODE baselines
annotate("label", x=0.72, y=1.07, label="DL baseline", color='#3E4989', label.size = NA, family="LM Roman 10", size=6) +
annotate("label", x=2.85, y=2.17, label="ODE baseline", color='#51A537', label.size = NA, family="LM Roman 10", size=6) +
scale_color_manual(values=c('#4c1d4b', '#a11a5b', '#e83f3f', '#f69c73')) +
scale_fill_manual(values=c('#4c1d4b', '#a11a5b', '#e83f3f', '#f69c73')) +
ylab("Relative MAE") +
theme_bw(base_size = 22) +
theme(legend.position = "top",
text = element_text(family="LM Roman 10"),
axis.title.x = element_blank(),
legend.margin=margin(0,0,0,0),
legend.box.margin=margin(-10,-10,-10,-10),
plot.margin =  margin(t = 8, r = 1, b = 1, l = 1, unit = "pt")))
ggsave("synthetic_datasets_size_boxplot_v6.pdf", fig, width=10, height=6, device=cairo_pdf)
install.packages("cowplot")
install.packages("tidyverse")
install.packages("cowplot")
install.packages("scales")
install.packages("extrafont")
library(tidyverse)
library(ggplot2)
library(cowplot)
library(scales)
library(extrafont)
loadfonts()
theme_set(theme_classic(base_size = 22))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Load results and convert experiments to factor (+ correct naming)
dl_results <- read_csv("mae_dataframe.csv") |>
mutate(
EXP = if_else(EXP == "covid", "COVID-19*",
if_else(EXP == "coh._rotifers_algae", "Rotifers-Algae\n(coherent)",
if_else(EXP == "incoh._rotifers_algae", "Rotifers-Algae\n(incoherent)",
"Lynx and Hares"))),
EXP = factor(EXP, levels=c("COVID-19*", "Rotifers-Algae\n(coherent)", "Rotifers-Algae\n(incoherent)", "Lynx and Hares")),
`Dataset size` = as.factor(TS)
)
# Load ode baseline result and convert experiments to factor (+ correct naming)
ode_baseline <- read_csv("../ode_baseline.csv") |>
pivot_longer(everything(), names_to = "EXP", values_to = "MAE") |>
mutate(
EXP = if_else(EXP == "covid", "COVID-19",
if_else(EXP == "rotifers_algae_coherent", "Rotifers-Algae\n(coherent)",
if_else(EXP == "rotifers_algae_incoherent", "Rotifers-Algae\n(incoherent)",
"Lynx and Hares"))),
EXP = factor(EXP, levels=c("COVID-19", "Rotifers-Algae\n(coherent)", "Rotifers-Algae\n(incoherent)", "Lynx and Hares")),
x = c(0.5, 1.5, 2.5, 3.5),
x_end = c(1.5, 2.5, 3.5, 4.5)
) |>
filter(EXP != "COVID-19")
(fig <- ggplot() +
geom_hline(yintercept = 1, linewidth=1, color='#3E4989') + # This is for the DL baseline - normalized with itself -> 1
geom_boxplot(data=dl_results, aes(x=EXP, y=MAE, fill=`Dataset size`, color=`Dataset size`), alpha=0.5, size=0.75) + # all results
geom_segment(data=ode_baseline, aes(x = x, xend = x_end, y = MAE, yend = MAE), linewidth=1, color='#51A537') + # ODE baselines
annotate("label", x=0.72, y=1.07, label="DL baseline", color='#3E4989', label.size = NA, family="LM Roman 10", size=6) +
annotate("label", x=2.85, y=2.17, label="ODE baseline", color='#51A537', label.size = NA, family="LM Roman 10", size=6) +
scale_color_manual(values=c('#4c1d4b', '#a11a5b', '#e83f3f', '#f69c73')) +
scale_fill_manual(values=c('#4c1d4b', '#a11a5b', '#e83f3f', '#f69c73')) +
ylab("Relative MAE") +
theme_bw(base_size = 22) +
theme(legend.position = "top",
text = element_text(family="LM Roman 10"),
axis.title.x = element_blank(),
legend.margin=margin(0,0,0,0),
legend.box.margin=margin(-10,-10,-10,-10),
plot.margin =  margin(t = 8, r = 1, b = 1, l = 1, unit = "pt")))
ggsave("synthetic_datasets_size_boxplot_v6.pdf", fig, width=10, height=6, device=cairo_pdf)
install.packages("scales")
install.packages("tidyverse")
install.packages("cowplot")
install.packages("extrafont")
library(tidyverse)
library(ggplot2)
library(extrafont)
loadfonts()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Returns the interval of the IQR as a string based on the standard deviation of the lognormal
get_interval_string <- function(sd){
lower <- upper <- round(qlnorm(0.25, meanlog = 0, sdlog = as.numeric(sd)), 2)
upper <- round(qlnorm(0.75, meanlog = 0, sdlog = as.numeric(sd)), 2)
paste0("[", sprintf("%.2f", lower), ",", sprintf("%.2f", upper), "]")
}
# loads the normlized ODE baseline and renames experiments
ode_baseline <- read_csv("../ode_baseline.csv") |>
select(rotifers_algae_coherent, lynx_hares) |>
pivot_longer(everything(), names_to = "experiment", values_to = "mean_mae_norm") |>
mutate(experiment=if_else(experiment == "covid", "COVID-19*",
if_else(experiment == "rotifers_algae_coherent", "Rotifers-Algae (coherent)",
if_else(experiment == "rotifers_algae_incoherent", "Rotifers-Algae (incoherent)*",
"Lynx and Hares"))),
experiment = factor(experiment, levels=c("COVID-19*", "Rotifers-Algae (coherent)", "Rotifers-Algae (incoherent)*", "Lynx and Hares")),
noise_type="ODE baseline",
noise_level = "0.0")
# load results based on the adjusted output csv of the noise experiments
results_tl <- read_csv("real_world_noise_experiments_adjusted.csv") |>
select(MAE, noise_std, experiment, noise_type) |>
group_by(experiment, noise_type, noise_std) |>
summarise(mean_mae = mean(MAE)) |>
# remove additive noise experiments as we do not want to show these in the figure
filter(!grepl("additive", noise_type, fixed = TRUE)) |>
filter(noise_type!="tl")
# removes baselines and renames experiments and noise types and normalizes values
results_tl_clean <- results_tl |>
filter(noise_std != "baseline") |>
left_join(results_tl |>
filter(
noise_std == "baseline"),
by=c("experiment"="experiment", "noise_type"="noise_type")) |>
select(experiment, noise_type, noise_level=noise_std.x, mean_mae=mean_mae.x, dl_baseline=mean_mae.y) |>
mutate(mean_mae_norm = mean_mae/dl_baseline) |>
mutate(noise_type = if_else(noise_level=="baseline", "baseline", noise_type)) |>
mutate(noise_type=if_else(noise_type=="tl_multiplicative", "Measuresment",
if_else(noise_type=="tl_multiplicative_derivative", "Environmental", noise_type))) |>
mutate(experiment=if_else(experiment == "sir", "COVID-19*",
if_else(experiment == "rosenbaum_coherent_new", "Rotifers-Algae (coherent)",
if_else(experiment == "rosenbaum_incoherent", "Rotifers-Algae (incoherent)*",
"Lynx and Hares"))),
experiment = factor(experiment, levels=c("COVID-19*", "Rotifers-Algae (coherent)", "Rotifers-Algae (incoherent)*", "Lynx and Hares"))) |>
select(-dl_baseline)
# loads the DL baseline and renames experiments and normalizes values
dl_baseline <- results_tl |>
filter(noise_std == "baseline") |>
mutate(experiment=if_else(experiment == "sir", "COVID-19*",
if_else(experiment == "rosenbaum_coherent_new", "Rotifers-Algae (coherent)",
if_else(experiment == "rosenbaum_incoherent", "Rotifers-Algae (incoherent)*",
"Lynx and Hares"))),
experiment = factor(experiment, levels=c("COVID-19*", "Rotifers-Algae (coherent)", "Rotifers-Algae (incoherent)*", "Lynx and Hares"))) |>
mutate(noise_type = "DL baseline",
noise_level="0.0",
mean_mae_norm = mean_mae/mean_mae) |>
select(-c("noise_std", "mean_mae"))
# Repeats the ODE and DL baselines for each standard deviation to simplify plotting
for (i in c("0.0625", "0.125", "0.25", "0.5", "1.0")) {
ode_baseline <- rbind(ode_baseline, ode_baseline |>
mutate(noise_level=i))
dl_baseline <- rbind(dl_baseline, dl_baseline |>
mutate(noise_level=i))
}
# combines baselines and experiment results
df_combined <- rbind(results_tl_clean, dl_baseline, ode_baseline) |>
mutate(noise_type = factor(noise_type, levels=c("Measuresment", "Environmental", "DL baseline", "ODE baseline")))  |>
mutate(noise_level = get_interval_string(noise_level),)
# plots figure
(fig <- ggplot(data=df_combined, aes(x=reorder(noise_level, desc(noise_level)), y=mean_mae_norm, group=noise_type, color=noise_type)) +
geom_line(linewidth=1) +
geom_point() +
facet_wrap(~experiment,
ncol = 2,
scales= "free_y") +
scale_color_manual(values=c('#e83f3f', '#f69c73', '#3E4989', '#51A537')) +
xlab("Noise factor (IQR)") +
ylab("Relative MAE") +
theme_bw(base_size = 18) +
theme(legend.position = "top",
axis.title = element_text(size=14.5),
axis.text = element_text(size=11.5),
axis.text.x = element_text(angle = 7.5),
legend.title = element_blank(),
text = element_text(family="LM Roman 10"),
strip.background = element_blank(),
legend.key.width=unit(1.3,"lines"),
legend.box.margin=margin(-10,-10,-25,-10),
plot.margin =  margin(t = 0, r = 0, b = 0, l = 0, unit = "pt")))
ggsave("RealWorldBoxplots_all_mae_2x2_v3.pdf", fig, width=10, height=5, device=cairo_pdf)
install.packages("cowplot")
install.packages("extrafont")
install.packages("extrafont")
install.packages("tidyverse")
install.packages("tidyverse")
if !require("tidyverse"){
if not require("tidyverse"){
if (!require("tidyverse")){
install.packages("tidyverse")
}
if (!require("tidyverse")){
install.packages("tidyverse")
}
if (!require("cowplot")){
install.packages("cowplot")
}
if (!require("extrafont")){
install.packages("extrafont")
}
library(tidyverse)
library(ggplot2)
library(extrafont)
loadfonts()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Returns the interval of the IQR as a string based on the standard deviation of the lognormal
get_interval_string <- function(sd){
lower <- upper <- round(qlnorm(0.25, meanlog = 0, sdlog = as.numeric(sd)), 2)
upper <- round(qlnorm(0.75, meanlog = 0, sdlog = as.numeric(sd)), 2)
paste0("[", sprintf("%.2f", lower), ",", sprintf("%.2f", upper), "]")
}
# loads the normlized ODE baseline and renames experiments
ode_baseline <- read_csv("../ode_baseline.csv") |>
select(rotifers_algae_coherent, lynx_hares) |>
pivot_longer(everything(), names_to = "experiment", values_to = "mean_mae_norm") |>
mutate(experiment=if_else(experiment == "covid", "COVID-19*",
if_else(experiment == "rotifers_algae_coherent", "Rotifers-Algae (coherent)",
if_else(experiment == "rotifers_algae_incoherent", "Rotifers-Algae (incoherent)*",
"Lynx and Hares"))),
experiment = factor(experiment, levels=c("COVID-19*", "Rotifers-Algae (coherent)", "Rotifers-Algae (incoherent)*", "Lynx and Hares")),
noise_type="ODE baseline",
noise_level = "0.0")
# load results based on the adjusted output csv of the noise experiments
results_tl <- read_csv("real_world_noise_experiments_adjusted.csv") |>
select(MAE, noise_std, experiment, noise_type) |>
group_by(experiment, noise_type, noise_std) |>
summarise(mean_mae = mean(MAE)) |>
# remove additive noise experiments as we do not want to show these in the figure
filter(!grepl("additive", noise_type, fixed = TRUE)) |>
filter(noise_type!="tl")
# removes baselines and renames experiments and noise types and normalizes values
results_tl_clean <- results_tl |>
filter(noise_std != "baseline") |>
left_join(results_tl |>
filter(
noise_std == "baseline"),
by=c("experiment"="experiment", "noise_type"="noise_type")) |>
select(experiment, noise_type, noise_level=noise_std.x, mean_mae=mean_mae.x, dl_baseline=mean_mae.y) |>
mutate(mean_mae_norm = mean_mae/dl_baseline) |>
mutate(noise_type = if_else(noise_level=="baseline", "baseline", noise_type)) |>
mutate(noise_type=if_else(noise_type=="tl_multiplicative", "Measuresment",
if_else(noise_type=="tl_multiplicative_derivative", "Environmental", noise_type))) |>
mutate(experiment=if_else(experiment == "sir", "COVID-19*",
if_else(experiment == "rosenbaum_coherent_new", "Rotifers-Algae (coherent)",
if_else(experiment == "rosenbaum_incoherent", "Rotifers-Algae (incoherent)*",
"Lynx and Hares"))),
experiment = factor(experiment, levels=c("COVID-19*", "Rotifers-Algae (coherent)", "Rotifers-Algae (incoherent)*", "Lynx and Hares"))) |>
select(-dl_baseline)
# loads the DL baseline and renames experiments and normalizes values
dl_baseline <- results_tl |>
filter(noise_std == "baseline") |>
mutate(experiment=if_else(experiment == "sir", "COVID-19*",
if_else(experiment == "rosenbaum_coherent_new", "Rotifers-Algae (coherent)",
if_else(experiment == "rosenbaum_incoherent", "Rotifers-Algae (incoherent)*",
"Lynx and Hares"))),
experiment = factor(experiment, levels=c("COVID-19*", "Rotifers-Algae (coherent)", "Rotifers-Algae (incoherent)*", "Lynx and Hares"))) |>
mutate(noise_type = "DL baseline",
noise_level="0.0",
mean_mae_norm = mean_mae/mean_mae) |>
select(-c("noise_std", "mean_mae"))
# Repeats the ODE and DL baselines for each standard deviation to simplify plotting
for (i in c("0.0625", "0.125", "0.25", "0.5", "1.0")) {
ode_baseline <- rbind(ode_baseline, ode_baseline |>
mutate(noise_level=i))
dl_baseline <- rbind(dl_baseline, dl_baseline |>
mutate(noise_level=i))
}
# combines baselines and experiment results
df_combined <- rbind(results_tl_clean, dl_baseline, ode_baseline) |>
mutate(noise_type = factor(noise_type, levels=c("Measuresment", "Environmental", "DL baseline", "ODE baseline")))  |>
mutate(noise_level = get_interval_string(noise_level),)
# plots figure
(fig <- ggplot(data=df_combined, aes(x=reorder(noise_level, desc(noise_level)), y=mean_mae_norm, group=noise_type, color=noise_type)) +
geom_line(linewidth=1) +
geom_point() +
facet_wrap(~experiment,
ncol = 2,
scales= "free_y") +
scale_color_manual(values=c('#e83f3f', '#f69c73', '#3E4989', '#51A537')) +
xlab("Noise factor (IQR)") +
ylab("Relative MAE") +
theme_bw(base_size = 18) +
theme(legend.position = "top",
axis.title = element_text(size=14.5),
axis.text = element_text(size=11.5),
axis.text.x = element_text(angle = 7.5),
legend.title = element_blank(),
text = element_text(family="LM Roman 10"),
strip.background = element_blank(),
legend.key.width=unit(1.3,"lines"),
legend.box.margin=margin(-10,-10,-25,-10),
plot.margin =  margin(t = 0, r = 0, b = 0, l = 0, unit = "pt")))
ggsave("RealWorldBoxplots_all_mae_2x2_v3.pdf", fig, width=10, height=5, device=cairo_pdf)
if (!require("tidyverse")){
install.packages("tidyverse")
}
if (!require("cowplot")){
install.packages("cowplot")
}
if (!require("scales")){
install.packages("scales")
}
if (!require("extrafont")){
install.packages("extrafont")
}
library(tidyverse)
library(ggplot2)
library(cowplot)
library(scales)
library(extrafont)
loadfonts()
theme_set(theme_classic(base_size = 22))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Load results and convert experiments to factor (+ correct naming)
dl_results <- read_csv("mae_dataframe.csv") |>
mutate(
EXP = if_else(EXP == "covid", "COVID-19*",
if_else(EXP == "coh._rotifers_algae", "Rotifers-Algae\n(coherent)",
if_else(EXP == "incoh._rotifers_algae", "Rotifers-Algae\n(incoherent)",
"Lynx and Hares"))),
EXP = factor(EXP, levels=c("COVID-19*", "Rotifers-Algae\n(coherent)", "Rotifers-Algae\n(incoherent)", "Lynx and Hares")),
`Dataset size` = as.factor(TS)
)
# Load ode baseline result and convert experiments to factor (+ correct naming)
ode_baseline <- read_csv("../ode_baseline.csv") |>
pivot_longer(everything(), names_to = "EXP", values_to = "MAE") |>
mutate(
EXP = if_else(EXP == "covid", "COVID-19",
if_else(EXP == "rotifers_algae_coherent", "Rotifers-Algae\n(coherent)",
if_else(EXP == "rotifers_algae_incoherent", "Rotifers-Algae\n(incoherent)",
"Lynx and Hares"))),
EXP = factor(EXP, levels=c("COVID-19", "Rotifers-Algae\n(coherent)", "Rotifers-Algae\n(incoherent)", "Lynx and Hares")),
x = c(0.5, 1.5, 2.5, 3.5),
x_end = c(1.5, 2.5, 3.5, 4.5)
) |>
filter(EXP != "COVID-19")
(fig <- ggplot() +
geom_hline(yintercept = 1, linewidth=1, color='#3E4989') + # This is for the DL baseline - normalized with itself -> 1
geom_boxplot(data=dl_results, aes(x=EXP, y=MAE, fill=`Dataset size`, color=`Dataset size`), alpha=0.5, size=0.75) + # all results
geom_segment(data=ode_baseline, aes(x = x, xend = x_end, y = MAE, yend = MAE), linewidth=1, color='#51A537') + # ODE baselines
annotate("label", x=0.72, y=1.07, label="DL baseline", color='#3E4989', label.size = NA, family="LM Roman 10", size=6) +
annotate("label", x=2.85, y=2.17, label="ODE baseline", color='#51A537', label.size = NA, family="LM Roman 10", size=6) +
scale_color_manual(values=c('#4c1d4b', '#a11a5b', '#e83f3f', '#f69c73')) +
scale_fill_manual(values=c('#4c1d4b', '#a11a5b', '#e83f3f', '#f69c73')) +
ylab("Relative MAE") +
theme_bw(base_size = 22) +
theme(legend.position = "top",
text = element_text(family="LM Roman 10"),
axis.title.x = element_blank(),
legend.margin=margin(0,0,0,0),
legend.box.margin=margin(-10,-10,-10,-10),
plot.margin =  margin(t = 8, r = 1, b = 1, l = 1, unit = "pt")))
ggsave("synthetic_datasets_size_boxplot_v6.pdf", fig, width=10, height=6, device=cairo_pdf)
if (!require("tidyverse")){
install.packages("tidyverse")
}
if (!require("cowplot")){
install.packages("cowplot")
}
if (!require("scales")){
install.packages("scales")
}
if (!require("extrafont")){
install.packages("extrafont")
}
if (!require("viridis")){
install.packages("viridis")
}
if (!require("grid")){
install.packages("grid")
}
if (!require("gridExtra")){
install.packages("gridExtra")
}
library(tidyverse)
library(ggplot2)
library(cowplot)
library(scales)
library(extrafont)
library(viridis)
library(grid)
library(gridExtra)
loadfonts()
theme_set(theme_classic(base_size = 12))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
dl_baseline <- read_csv("heatmap_baseline.csv")
covid <- read_csv("heatmap_data/covid.csv") |>
mutate(MAE = MAE / dl_baseline$covid)
coh_rot_algae <- read_csv("heatmap_data/rotifers_algae_coherent.csv") |>
mutate(MAE = MAE / dl_baseline$rotifers_algae_coherent)
incoh_rot_algae <- read_csv("heatmap_data/rotifers_algae_incoherent.csv") |>
mutate(MAE = MAE / dl_baseline$rotifers_algae_incoherent)
lynx_hares <- read_csv("heatmap_data/lynx_hares.csv") |>
mutate(MAE = MAE / dl_baseline$lynx_hares)
prepare_df <- function(df){
df |>
mutate(TS = as.factor(as.integer(TS)),
IC = if_else(IC==0, "S",
if_else(IC==1, "M",
if_else(IC==2, "L", "XL"
)
)
),
IC = factor(IC, levels=c("S", "M", "L", "XL")),
KP = if_else(KP==0, "S",
if_else(KP==1, "M",
if_else(KP==2, "L", "XL"
)
)
),
KP = factor(KP, levels=c("S", "M", "L", "XL")),
)
}
t <- quantile(lynx_hares$MAE, probs = c(0, 0.5, 1))
round(as.numeric(t), 1)
median(lynx_hares$MAE)
plot_col <- function(df, name){
ggplot(data=df, aes(x=KP, y=IC, fill=MAE)) +
geom_tile() +
scale_fill_viridis(option = "rocket", direction = -1, breaks=round(as.numeric(quantile(df$MAE, probs = c(0, 0.5, 0.7))),1)) +
facet_wrap(~TS,
ncol = 1,
strip.position="right") +
theme(axis.line = element_blank(),
legend.position = "top",
axis.title = element_blank(),
axis.text.y = element_blank(),
axis.text.x = element_text(size=11),
axis.ticks.y = element_blank(),
legend.text = element_text(size=11),
plot.margin = margin(0,0,0,0, "pt"),
strip.background = element_blank(),
legend.key.width=unit(1.3,"lines"),
legend.title.align=0.5,
legend.box.margin=margin(0,-10,-10,-10),
text = element_text(family="LM Roman 10"),
) +
guides(fill = guide_colorbar(
title = name,
title.position = "top",
label.position = "top"),
)
}
(fig <- plot_grid(plot_col(prepare_df(covid), "\nCOVID-19") + theme(strip.text = element_blank(), axis.ticks.y = element_line(), axis.text.y = element_text(size=11)) ,
plot_col(prepare_df(coh_rot_algae), "Rotifers-Algae\n(coherent)") + theme(strip.text = element_blank()),
plot_col(prepare_df(incoh_rot_algae), "Rotifers-Algae\n(incoherent)") + theme(strip.text = element_blank()),
plot_col(prepare_df(lynx_hares), "\nLynx and Hares") + theme(strip.text = element_text(size=11)),
nrow=1,
rel_widths = c(1.17, 1, 1, 1.187),
labels = c("Relative\n  MAE", "", "", ""),
label_fontfamily = "serif",
label_fontface = "plain",
label_size = 11,
hjust = 0.52, vjust = 3) +
theme(plot.margin = margin(0,0,3,2))
)
y.grob <- textGrob("IC sampling interval",
gp=gpar(fontsize=15, fontfamily="LM Roman 10"), rot=90, hjust = 0.7, vjust=0.3)
x.grob <- textGrob("KP sampling interval",
gp=gpar(fontsize=15, fontfamily="LM Roman 10"), vjust=0.5)
y2.grob <- textGrob("Dataset size",
gp=gpar(fontsize=15, fontfamily="LM Roman 10"), rot=270, hjust = 0.25)
fig_complete <- grid.arrange(arrangeGrob(fig, left = y.grob, bottom = x.grob, right=y2.grob))
ggsave("multivariate-evaluation_v5_reverse.pdf", fig_complete, width=6.5, height=7, device=cairo_pdf)
